create database student;

use student;

 CREATE TABLE Student (
    id INT,
    name VARCHAR(255),
    email VARCHAR(255),
    phone VARCHAR(255), 
    Address VARCHAR(255),
    admissiondate DATE,
    fees INT,
    status VARCHAR(255)
);


desc Student;

INSERT INTO Student (id, name, email, phone, Address, admissiondate, fees, status)
VALUES
    (1, 'Shubham', 's@gmail.com', 7890, 'pune', '2023-05-01', 5000, 'Active'),
    (2, 'Aditya', 'a@gmail.com', 210, 'mumbai', '2023-06-15', 5500, 'Inactive');

/////Create New Project---> ASP.net Model View Controller--->name= StudentManagement

/////RC Model-->New Class--> Student.cs


namespace StudentManagement.Models
{
    public class Student
    {

        public int id { get; set; }
        public string name { get; set; }
        public string email { get; set; }
        public int phone { get; set; }
        public string Address { get; set; }
        public DateTime admissiondate { get; set; }
        public int fees { get; set; }
        public string status { get; set; }

        public Student(int id, string name, string email, int phone, string Address, DateTime admissiondate, int fees, string status)
        {
            this.id = id;
            this.name = name;
            this.email = email;
            this.phone = phone;
            this.Address = Address;
            this.admissiondate = admissiondate;
            this.fees = fees;
            this.status = status;
        }

        public Student()
        {
        }

        public Student(int id,string name, string email, int phone, string Address, string status)
        {
            this.id = id;
            this.name = name;
            this.email = email;
            this.phone = phone;
            this.Address = Address;
            this.status = status;
        }
    }
}


/////RC StudentManagement---> New Folder ---> Repositories
///// RC Repositories--->Add Class--->StudentCollectionContext.cs

using Microsoft.EntityFrameworkCore;
using StudentManagement.Models;

namespace StudentManagement.Repositories
{
    public class StudentCollectionContext:DbContext
    {

        public DbSet<Student> dbcontext {  get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            var connection = @"server=localhost;port=3306;user=root;password=mynameisg9;database=student";
            optionsBuilder.UseMySQL(connection);    
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
           modelBuilder.Entity<Student>(
               entity =>
               {
                   entity.HasKey(e => e.id);
                   entity.Property(e => e.name)
                   .IsRequired();
                   entity.Property(e => e.email).IsRequired();
                   entity.Property(e=>e.fees).IsRequired();
                   entity.Property(e=>e.status).IsRequired();
                   entity.Property(e=>e.Address).IsRequired();
                   entity.Property(e=>e.admissiondate).IsRequired();
                   entity.Property(e=>e.phone).IsRequired();

               }
               );

            modelBuilder.Entity<Student>().ToTable("student");
        }
    }
}


///// RC Repositories--->Add Class--->StudentManagerRepo.cs

using Microsoft.EntityFrameworkCore.Internal;
using Org.BouncyCastle.Tls;
using StudentManagement.Models;
using System.Security.Cryptography.Xml;

namespace StudentManagement.Repository
{
    public static class StudentManagerRepo
    {

        public static bool Login(string username, int password) 
        {
            using (var context = new StudentCollectionContext()) {
                Console.WriteLine(username + " " + password);
                var std=context.dbcontext.Where(s=>s.email == username && s.phone == password);
                if (std != null) 
                {
                    return true;
                }
                return false;
            }
        }
        public static bool AdminLogin(string username, int password) 
        {  using (var context = new StudentCollectionContext()) {
                var std = context.dbcontext.FirstOrDefault(s => "Admin" == username && 12345 == password);
                if (std != null) {
                    return true;
                }
                return false;
            }
        }


        public static Student AddNewStudent(Student stdent)
        {
            using (var context = new StudentCollectionContext())
            {
                var std = context.dbcontext.Add(stdent);
                context.SaveChanges();
                return stdent;
            }
        }


        public static List<Student> GetAllStudents()
        {
            using (var context = new StudentCollectionContext())
            {
                var std = from s
                          in context.dbcontext
                          select s;
               
                return std.ToList<Student>();
            }

        }

        public static List<Student> searchStudent(String status)
        {
            using (var context = new StudentCollectionContext())
            {
                return context.dbcontext.Where(s=>s.status==status).ToList<Student>();
            }
        }

        public static bool deleteStudentByID(int id)
        {
            using (var context = new StudentCollectionContext())
            {
                var std = context.dbcontext.Find(id);
                if(id!=null)
                {
                    var i=context.dbcontext.Remove(std);
                    context.SaveChanges();
                    return true;
                }
                return false;
            }
        }

        public static List<Student> sortstudentByStatus()
        {
            using (var context = new StudentCollectionContext())
            {
                return context.dbcontext.OrderBy(s => s.status).ToList();
            }
        }


        public static Student updateStudent(Student std)
        {
            using (var context = new StudentCollectionContext())
            {
                var std1 = context.dbcontext.Find(std.id);
                if (std1 != null) 
                {
                    std1.name=std.name;
                    std1.phone=std.phone;
                    std1.Address = std.Address;
                    std1.email=std.email;
                    std1.status=std.status;
                    std1.admissiondate=std.admissiondate;
                    std1.fees=std.fees;
                    context.SaveChanges();
                   
                }
                return std1;
            }

        }

        public static Student getStudentById(int id)
        {
            using (var context = new StudentCollectionContext())
            {
                var std = context.dbcontext.Find(id);
                return std;
            }
        }

        public static Student EditStudent(Student std)
        {
            using (var context = new StudentCollectionContext())
            {
                var std1 = context.dbcontext.Find(std.id);
                if (std1 != null)
                {
                    std1.name = std.name;
                    std1.phone = std.phone;
                    std1.Address = std.Address;
                    std1.email = std.email;
                    std1.status = std.status;
                    context.SaveChanges();
                }
                return std1;
            }
        }

    }
}

/////RC Project name StudentManagement---> New Folder ---> Service
/////RC Service ----> Add Class ---> interface ----> IStudentService.cs

using StudentManagement.Models;
namespace StudentManagement.Service
{
    public interface IStudentService
    {
        public bool StudentLogin(String username,int password);
        public bool AdminLogin(String username,int password);

        public Student AddNewStudent(Student student);

        public List<Student> GetAllStudent();
        public List<Student> searchStudent(String status);
        public  bool deleteStudentByID(int id);
        public List<Student> sortstudentByStatus();

        public Student updateStudent(Student std);

        public Student getStudentById(int id);
        public  Student EditStudent(Student std);
    }
}


/////RC Service---> Add Class ----> StudentServiceImpl.cs


using StudentManagement.Repository;
using StudentManagement.Models;
namespace StudentManagement.Service
{
    public class StudentServiceImpl:IStudentService
    {
        public bool StudentLogin(String username, int password)
        {
            return StudentManagerRepo.Login(username, password);
        }

        public bool AdminLogin(String username, int password)
        {
            return StudentManagerRepo.AdminLogin(username, password);
        }

        public Student AddNewStudent(Student student)
        {
            return StudentManagerRepo.AddNewStudent(student);
        }


        public List<Student> GetAllStudent()
        {
            return StudentManagerRepo.GetAllStudents();
        }
        public List<Student> searchStudent(String status)
        {
            return StudentManagerRepo.searchStudent(status);
        }
        public bool deleteStudentByID(int id)
        {
            return StudentManagerRepo.deleteStudentByID(id);
        }
        public List<Student> sortstudentByStatus()
        {
            return StudentManagerRepo.sortstudentByStatus();
        }

        public Student updateStudent(Student std)
        {
            return StudentManagerRepo.updateStudent(std);
        }

        public Student getStudentById(int id)
        {
            return StudentManagerRepo.getStudentById(id);
        }
        public Student EditStudent(Student std)
        {
            return StudentManagerRepo.EditStudent(std);
        }
    }
}


////RC Controllers---> Add Class---->AdminAuthController.cs

using Microsoft.AspNetCore.Mvc;
using StudentManagement.Service;

namespace StudentManagement.Controllers
{
    public class AdminAuthController : Controller
    {
        private IStudentService _studentService;
        public AdminAuthController(IStudentService studentService)
        {
            _studentService = studentService;
        }
        public IActionResult Index()
        {
            return View();
        }

        [HttpGet]
        public IActionResult AddNewStudent()
        {
            return View();
        }

        [HttpPost]
        public IActionResult AddNewStudent(int id, string name, string email, int phone, string Address, DateTime admissiondate, int fees, string status)
        {
            var std=_studentService.AddNewStudent(new Models.Student(id, name, email, phone, Address, admissiondate, fees, status));
            return View();
        }

        public IActionResult GetAllStudent()
        {
            return View(_studentService.GetAllStudent());
        }

        public IActionResult SortStudent()
        {
            return View(_studentService.sortstudentByStatus());
        }

        [HttpGet]
        public IActionResult SearchStudent()
        {
            return View();
        }

        [HttpPost]
        public IActionResult ResultSearchStudent(string s)
        {
            return View(_studentService.searchStudent(s));
        }
        [HttpGet]
        public IActionResult deleteStudent()
        {
            return View();
        }

        [HttpPost]
        public IActionResult deleteStudent(int id) 
        {

            _studentService.deleteStudentByID(id);
            return View();
        }

        [HttpGet]
        public IActionResult UpdateStudent()
        {
            return View();
        }

        [HttpPost]
        public IActionResult UpdateStudent(int id, string name, string email, int phone, string Address, DateTime admissiondate, int fees, string status)
        {
            var std = _studentService.updateStudent(new Models.Student(id, name, email, phone, Address, admissiondate, fees, status));
            return View();
        }



    }
}


////RC Controllers---> Add Class---->AdminController.cs

using Microsoft.AspNetCore.Mvc;
using StudentManagement.Models;
using System.Diagnostics;

namespace StudentManagement.Controllers
{
    public class HomeController : Controller
    {
        private readonly ILogger<HomeController> _logger;

        public HomeController(ILogger<HomeController> logger)
        {
            _logger = logger;
        }

        public IActionResult Index()
        {
            return View();
        }

        public IActionResult Privacy()
        {
            return View();
        }

        [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
        public IActionResult Error()
        {
            return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
        }
    }
}



////RC Controllers---> Add Class---->HomeController.cs

using Microsoft.AspNetCore.Mvc;
using StudentManagement.Models;
using System.Diagnostics;

namespace StudentManagement.Controllers
{
    public class HomeController : Controller
    {
        private readonly ILogger<HomeController> _logger;

        public HomeController(ILogger<HomeController> logger)
        {
            _logger = logger;
        }

        public IActionResult Index()
        {
            return View();
        }

        public IActionResult Privacy()
        {
            return View();
        }

        [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
        public IActionResult Error()
        {
            return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
        }
    }
}


////RC Controllers---> Add Class---->StdAuthController.cs

using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using StudentManagement.Service;
using StudentManagement.Models;

namespace StudentManagement.Controllers
{
    public class StdAuthController : Controller
    {
        private readonly IStudentService _studentService;
        public StdAuthController(IStudentService studentService) 
        {
            _studentService = studentService;
        }
        // GET: StdAuthController
        public ActionResult Index()
        {
            return View();
        }

        

        // GET: StdAuthController/Create
        public IActionResult EditStd()
        {
            return View();
        }

        // POST: StdAuthController/Create
        [HttpPost]
        public IActionResult EditStd(int id, string name, string email, int phone, string Address, string status)
        {

            Console.WriteLine(id+""+ name, email, phone, Address, status);
                _studentService.EditStudent(new Models.Student( id,name,email, phone,  Address,  status));
                return View();
            
        }


        
        public IActionResult GetStudentByID() 
        {
            return View();
        }

        [HttpPost]
        public IActionResult ResultStudentByID(int id)
        {
            return View(_studentService.getStudentById(id));
        }






    }
}


////RC Controllers---> Add Class---->StudnetController.cs

using Microsoft.AspNetCore.Mvc;
using StudentManagement.Service;

namespace StudentManagement.Controllers
{
    public class StudnetController : Controller
    {
        private IStudentService _studentService;
        public StudnetController(IStudentService studentService)
        {
            _studentService = studentService;
        }
        public IActionResult Index()
        {
            return View();
        }
        [HttpGet]
        public IActionResult StudentLogin()
        {
            return View();
        }
        [HttpPost]
        public IActionResult StudentLogin(string username, int password)
        {
            Console.WriteLine(username + " " + password+" "+ _studentService.StudentLogin(username, password));

            if (_studentService.StudentLogin(username, password) == true)
            {
                Console.WriteLine(username + " " + password);
                return RedirectToAction("StudentDetails");
            }
            return View();
        }

        public IActionResult StudentDetails()
        { 
            return View();
        }

    }
}







