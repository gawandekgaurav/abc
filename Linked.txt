///File--->New---->Java Project---_> LinkedList

///RC src---->package---->linkedlist

///RC package linkedlist---->New---->Class---->Node

package linkedlist;

public class Node {
	private int data;
	private Node next;
	
	public Node(int data) {
		this.data=data;
		this.next=null;
	}

	public Node() {
		super();
	}

	public int getData() {
		return data;
	}

	public void setData(int data) {
		this.data = data;
	}

	public Node getNext() {
		return next;
	}

	public void setNext(Node next) {
		this.next = next;
	}	
}


///RC package---->New---->Class---->LinkedList

package linkedlist;

public class LinkedList {
	private Node head;

	public LinkedList() {
		this.head = null;
	}

	public Node getHead() {
		return head;
	}

	public void setHead(Node head) {
		this.head = head;
	}


//Insert Data into list

	public boolean insert(int data) {
		Node newNode = new Node(data);
		if (head == null) {
			head = newNode;
			return true;
		}
		Node temp = head;
		while (temp.getNext() != null) {
			temp = temp.getNext();
		}
		temp.setNext(newNode);
		return true;
	}

//Display data 

	public void display() {
		Node temp = head;
		while (temp != null) {
			System.out.print(temp.getData() + " ");
			temp = temp.getNext();
		}
		System.out.println();
	}

//Length of the list

	public void length() {
		Node temp = head;
		int count = 0;
		while (temp != null) {
			temp = temp.getNext();
			count++;
		}
		System.out.println("The Length of list: " + count);
	}

//Insert at particular position

	public boolean insertAtPosition(int data, int position) {
		Node newNode = new Node(data);
		if (position <= 0 || (head == null && position > 1)) {
			return false;
		}
		if (position == 1) {
			if (head == null) {
				head = newNode;
				return true;
			}
			newNode.setNext(head);
			head = newNode;
			return true;
		}
		Node prev = head;
		for (int i = 1; i < position - 1; i++) {
			prev = prev.getNext();
			if (prev == null) {
				return false;
			}
		}
		newNode.setNext(prev.getNext());
		prev.setNext(newNode);
		return true;
	}

//Delete at particular position

	public boolean deletAtPosition(int position) {
		if (position <= 0 || (head == null && position > 1)) {
			return false;
		}
		if (position == 1) {
			if (head == null) {
				return false;
			}
			head = head.getNext();
			return true;
		}
		Node temp = head;
		for (int i = 1; i < position - 1; i++) {
			temp = temp.getNext();
			if (temp == null) {
				return false;
			}
		}
		temp.setNext(temp.getNext().getNext());
		return true;
	}

//Delete by value

	public boolean deleteByData(int data) {
		if (head == null) {
			return false;
		}
		if(head.getData()==data) {
			head = head.getNext();
			return true;
		}
		Node prev = head;
		Node current = head.getNext();
		while(current!=null &&current.getData()!=data) {
			prev = current;
			current = current.getNext();
			if(current==null) {
				return false;
			}
		}
		prev.setNext(current.getNext());
		return true;
	}
	
//Remove Last element
	
	public boolean remove() {
		if(head==null) {
			return false;
		}
		if(head.getNext()==null) {
			head=null;
			return true;
		}
		Node temp  = head;
		while(temp.getNext().getNext()!=null) {
			temp = temp.getNext();
		}
		temp.setNext(null);
		return true;
	}

//maximum from the list
	
	public int max() {
		int max = Integer.MIN_VALUE;
		Node temp = head;
		while(temp!=null) {
			if(temp.getData() > max) {
				max= temp.getData();	
			}
			temp = temp.getNext();
		}
		return max;
		
	}

//minimum from the list
	
	public int min() {
		int min = Integer.MAX_VALUE;
		Node temp = head;
		while(temp!=null) {
			if(temp.getData() < min) {
				min= temp.getData();	
			}
			temp = temp.getNext();
		}
		return min;
		
	}

Reverse the list
	
	public void reverseList(Node temp) {
		if(temp==null) {
			System.out.println();
			return;
		}
		reverseList(temp.getNext());
		System.out.println(temp.getData()+" ");
	}
}


/////RC package---->New---->Class---->Main---->select public static void main

package linkedlist;

import java.util.Scanner;

public class Main {

	public static void main(String[] args) {
		
		try(Scanner sc = new Scanner(System.in)){
			LinkedList l1 = new LinkedList();
			boolean exit = false;
		try {
			while(!exit) {
			System.out.println("1.Insert data into linked list\n" +"2.Display\n"
			+"3.Length\n"+"4.Insert at position\n"+"5.Delete by position\n"
					+"6.Delete by data\n"+"7.Find max\n"+"8.Find min\n"
			+"9.Reverse List\n"
					+"10.Remove\n"+"11.Exit");			
			System.out.println("Enter your choice");


			switch (sc.nextInt()) {
			case 1:
				System.out.println("Enter the num of elements you want to insert");
				int size=sc.nextInt();
				for(int i=0;i<size;i++) {
					System.out.println("Enter the elements");
					l1.insert(sc.nextInt());
				}
				break;
			case 2:
				l1.display();
				break;
			case 3:
				l1.length();
				break;
			case 4:
				System.out.println("Enter the data and position");
				l1.insertAtPosition(sc.nextInt(), sc.nextInt());
				break;
			case 5:
				System.out.println("Enter the position");
				l1.deletAtPosition(sc.nextInt());
				break;
			case 6:
				System.out.println("Enter data");
				l1.deleteByData(sc.nextInt());
				break;
			case 7:
				System.out.println(l1.max());
				break;
			case 8:
				System.out.println(l1.min());
				break;
			case 9:
				l1.reverseList(l1.getHead());
				break;
			case 10:
				l1.remove();
				break;
			case 11: 
			System.out.println("Exiting.....");
			break;
			default:
				break;
			}	
			}
			
		}catch(Exception e) {
			e.getStackTrace();
		}	
		}
	}
}

