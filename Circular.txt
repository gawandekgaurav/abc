///File--->New---->Java Project---_> CircularLinkedList

///RC src---->package---->circularlinkedlist

///RC package circularlinkedlist---->New---->Class---->Node

public class Node {
    private int data;
    private Node next;

    public Node(int data) {
        this.data = data;
        this.next = null;
    }

    public int getData() {
        return data;
    }

    public void setData(int data) {
        this.data = data;
    }

    public Node getNext() {
        return next;
    }

    public void setNext(Node next) {
        this.next = next;
    }
}


////RC package---->New---->Class---->CircularLinkedList


public class CircularLinkedList {
    private Node head;

    public CircularLinkedList() {
        head = null;
    }

//Insert Data into list

    public boolean insert(int data) {
        Node newNode = new Node(data);
        if (newNode == null) {
            return false;
        }

        if (head == null) {
            head = newNode;
            head.setNext(head);
            return true;
        }

        Node last = head;
        while (last.getNext() != head) {
            last = last.getNext();
        }

        last.setNext(newNode);
        newNode.setNext(head);
        return true;
    }
	
//Insert at particular position

    public boolean insert(int data, int position) {
        if ((head == null && position > 1) || position <= 0) {
            return false;
        }

        Node newNode = new Node(data);

        if (position == 1) {
            if (head == null) {
                head = newNode;
                head.setNext(head);
                return true;
            }

            Node last = head;
            while (last.getNext() != head) {
                last = last.getNext();
            }

            newNode.setNext(head);
            head = newNode;
            last.setNext(newNode);
            return true;
        }

        Node prev = head;
        for (int i = 1; i < position - 1; i++) {
            prev = prev.getNext();
            if (prev == head) {
                return false;
            }
        }

        newNode.setNext(prev.getNext());
        prev.setNext(newNode);
        return true;
    }

//Delete by value

    public boolean deleteByVal(int data) {
        if (head == null) {
            return false;
        }

        if (head.getData() == data) {
            if (head.getNext() == head) {
                head = null;
                return true;
            }

            Node last = head;
            while (last.getNext() != head) {
                last = last.getNext();
            }
            head = head.getNext();
            last.setNext(head);

            return true;
        }

        Node prev = head, del = head;
        while (del.getData() != data) {
            prev = del;
            del = del.getNext();
            if (del == head) {
                return false;
            }
        }

        prev.setNext(del.getNext());
        return true;
    }
	
//Delete at particular position

    public boolean deleteByPosition(int position) {
        if (head == null || position <= 0) {
            return false;
        }

        if (position == 1) {
            if (head.getNext() == head) {
                head = null;
                return true;
            }
            Node last = head;
            while (last.getNext() != head) {
                last = last.getNext();
            }

            head = head.getNext();
            last.setNext(head);

            return true;
        }

        Node prev = head;
        for(int i = 1; i < position - 1; i++) {
            prev = prev.getNext();
            //check if prev referring to last node
            if(prev.getNext() == head) {
                return false;
            }
        }

        Node del = prev.getNext();
        prev.setNext(del.getNext());

        return true;
    }
	
//Display data 

    public void display() {
        if (head == null) {
            return;
        }
        Node temp = head;
        do {
            System.out.print(temp.getData() + " ");
            temp = temp.getNext();
        } while (temp != head);

        System.out.println();
    }
}

//minimum from the list

	public int min() {
		int min = Integer.MAX_VALUE;
		Node temp = head;
		while(temp!=null) {
			if(temp.getData() < min) {
				min= temp.getData();	
			}
			temp = temp.getNext();
		}
		return min;
		
	}
	
	
//maximum from the list

public int max() {
		int max = Integer.MIN_VALUE;
		Node temp = head;
		while(temp!=null) {
			if(temp.getData() > max) {
				max= temp.getData();	
			}
			temp = temp.getNext();
		}
		return max;
		

////RC package---->New---->Class---->Main---->select public static void main


package circularlinkedlist;

import java.util.Scanner;

public class Main {

	public static void main(String[] args) {
		
		try(Scanner sc = new Scanner(System.in)){
			CircularLinkedList l1 = new CircularLinkedList();
			boolean exit = false;
		try {
			while(!exit) {
			System.out.println("1.Insert data into circular linked list\n" +"2.Display\n"
			+"3.Insert at position\n"+"4.Delete by position\n"
					+"5.Delete by value\n"+"6.Find max\n"+"7.Find min\n"
			+"8.Exit");			
			System.out.println("Enter your choice");
			switch (sc.nextInt()) {
			case 1:
				System.out.println("Enter the num of elements you want to insert");
				int size=sc.nextInt();
				for(int i=0;i<size;i++) {
					System.out.println("Enter the elements");
					l1.insert(sc.nextInt());
				}
				break;
			case 2:
				l1.display();
				break;
			
			case 3:
				System.out.println("Enter the data and position");
				l1.insert(sc.nextInt(), sc.nextInt());
				break;
			case 4:
				System.out.println("Enter the position");
				l1.deletByPosition(sc.nextInt());
				break;
			case 5:
				System.out.println("Enter data");
				l1.deleteByVal(sc.nextInt());
				break;
			case 6:
				System.out.println(l1.max());
				break;
			case 7:
				System.out.println(l1.min());
				break;
			case 8: 
			System.out.println("Exiting.....");
			break;
			default:
				break;
			}
		}
			
		}catch(Exception e) {
			e.getStackTrace();
		}	
		}
	}
}

