///Import maven project spring_boot_backend_template

/// RC on project---> Maven --->Update Project ----> tick Force Update----> Ok

////RC src/main/java ----> New ---> Package ---> com.app.entities ----> Finish

////RC com.app.entities----> Class----> Railway

package com.app.entities;

import java.sql.Date;
import java.time.LocalDateTime;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.validation.constraints.Past;
import javax.validation.constraints.PastOrPresent;

import com.fasterxml.jackson.annotation.JsonFormat;

@Entity
@Table(name="railways")
public class Railway {

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(unique=true)
	private long id;
	
	@Column(name="name", nullable = true)
	private String	Name;
	@Column(name="category", nullable = true)
	@Enumerated(EnumType.STRING)
	private Category category;
	@Column(name="Start_time", nullable = true)
	@PastOrPresent
	
	private Date Start_time; 
	@Column(name="End_time", nullable = true)
	
	private Date End_time;
	@Column(name="Source", nullable = true)
	private String Source;
	@Column(name="Destiation", nullable = true)
	private String	Destiation;
	@Column(name="station_code", nullable = true)
	private String 	station_code;
	@Column(name="Distance", nullable = true)
	private long	Distance;
	@Column(name="Frequency", nullable = true)
	private int	Frequency;
	public long getId() {
		return id;
	}
	public void setId(long id) {
		this.id = id;
	}
	public String getName() {
		return Name;
	}
	public void setName(String name) {
		Name = name;
	}
	public Category getCategory() {
		return category;
	}
	public void setCategory(Category category) {
		this.category = category;
	}
	public Date getStart_time() {
		return Start_time;
	}
	public void setStart_time(Date start_time) {
		Start_time = start_time;
	}
	public Date getEnd_time() {
		return End_time;
	}
	public void setEnd_time(Date end_time) {
		End_time = end_time;
	}
	public String getSource() {
		return Source;
	}
	public void setSource(String source) {
		Source = source;
	}
	public String getDestiation() {
		return Destiation;
	}
	public void setDestiation(String destiation) {
		Destiation = destiation;
	}
	public String getStation_code() {
		return station_code;
	}
	public void setStation_code(String station_code) {
		this.station_code = station_code;
	}
	public long getDistance() {
		return Distance;
	}
	public void setDistance(long distance) {
		Distance = distance;
	}
	public int getFrequency() {
		return Frequency;
	}
	public void setFrequency(int frequency) {
		Frequency = frequency;
	}
	@Override
	public String toString() {
		return "Railway [id=" + id + ", Name=" + Name + ", category=" + category + ", Start_time=" + Start_time
				+ ", End_time=" + End_time + ", Source=" + Source + ", Destiation=" + Destiation + ", station_code="
				+ station_code + ", Distance=" + Distance + ", Frequency=" + Frequency + "]";
	}

	
}


///Enum class

package com.app.entities;

public enum Category {
	Express,Shatabdi,AC,Metro
}


////RC src/main/java ----> New ---> Package ---> com.app.dto --->Finish

////RC com.app.dto----> Class----> RailwayDTO

package com.app.dto;

import java.sql.Date;

import com.app.entities.Category;

public class RailwayDTO {
	//no id
	private String Name;
	private Category category;
	private Date Start_time;
	private Date End_time;
	private int Frequency;
	
	
}

////RC src/main/java ----> New ---> Package ---> com.app.service --->Finish

////RC com.app.service----> Class----> RailwayService

package com.app.service;

import java.util.List;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.app.Validations.Validations;
import com.app.custom_exceptions.ResourceNotFoundException;
import com.app.entities.Category;
import com.app.entities.Railway;
import com.app.repository.RailwayRepo;

@Service
@Transactional
public class RailwayService {

	@Autowired
	private RailwayRepo repo;
	
	public Railway Insert(Railway rail) {
		
		return repo.save(rail);
	}
	
	public List<Railway> DisplayAll(){
		return repo.findAll();
	}

	public Railway DeleteById(long id) {
		Railway r=repo.findById(id).orElseThrow(()-> new ResourceNotFoundException("Invalid id")); 
		repo.deleteById(id);
		return r;
	}


	public List<Railway> FindByCat(String cat){
		return repo.findByCategory(Category.valueOf(Category.class, cat));
	}

	
	public String Update(Railway r) {
		if(repo.existsById(r.getId())) {
			 repo.save(r);
			 return "Updated successfully!!!";
		}
		return "fail to update!!";
		
	}
}


////RC src/main/java ----> New ---> Package ---> com.app.repository --->Finish

////RC com.app.repository----> Interface----> RailwayRepo


package com.app.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;

import com.app.entities.*;

public interface RailwayRepo extends JpaRepository<Railway, Long> {

}


////RC src/main/java ----> New ---> Package ---> com.app.controller --->Finish

////RC com.app.controller----> Class----> RailwayController


package com.app.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.app.entities.Railway;
import com.app.service.RailwayService;

@RestController
@RequestMapping("/Railway")
public class RailwayController {

	@Autowired
	private RailwayService railwayService;
	
	
	@PostMapping("/Inser")
	public ResponseEntity<Railway> Insert(Railway railway){
		Railway rail=railwayService.Insert(railway);
		return ResponseEntity.ok(rail);
	}
	
	@GetMapping
	public ResponseEntity<List<Railway>> Display(){
		List<Railway> railway= railwayService.DisplayAll();
		return ResponseEntity.ok(railway);
	}
	
	@PutMapping("/{id}")
	public ResponseEntity<Railway> Delete(@RequestParam long id){
		Railway r=railwayService.DeleteById(id);
		return ResponseEntity.ok(r);
	}
	
	@GetMapping("/FindBYCategory")
	public ResponseEntity<List<Railway>> FindByCategory(@RequestParam String Category){
		
		List<Railway> r=railwayService.FindByCat(Category);
		return ResponseEntity.ok(r);
	}
	
	@GetMapping("/SortByName")
	public ResponseEntity<List<Railway>> SortByNames(){
		return ResponseEntity.ok(railwayService.SortByNames());
	}
	
}

////RC src/main/java ----> New ---> Package ---> com.app.custom_exceptions --->Finish

////RC com.app.custom_exceptions----> Class----> ApiException

package com.app.custom_exceptions;

public class ApiException extends RuntimeException {
	public ApiException(String mesg) {
		super(mesg);
	}
}

////RC com.app.custom_exceptions----> Class----> InvalidCredentialsException

package com.app.custom_exceptions;

public class InvalidCredentialsException extends RuntimeException {
	public InvalidCredentialsException(String mesg) {
		super(mesg);
	}
}



////RC com.app.custom_exceptions----> Class----> ResourceNotFoundException


package com.app.custom_exceptions;

public class ResourceNotFoundException extends RuntimeException {
	public ResourceNotFoundException(String mesg) {
		super(mesg);
	}
}


////Go to src/main/resources ---> application.process ---> change password to root123


////Go to src/main/resources ---> Application.java----> RC inside ---->Run As----> Spring Boot App

////chrome goto localhost:8080/swagger-ui/index.html#/






