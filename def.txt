create database employee;

use employee;

CREATE TABLE Employee (
    id INT,
    name VARCHAR(255),
    reg_date DATE,
    address VARCHAR(255), 
    mob_num VARCHAR(255),
    email VARCHAR(255),
    password VARCHAR(255)
);

insert into Employee values(1,'gaurav','1996-12-12','nagpur','8898755','hello');

/////Create New Project---> ASP.net Model View Controller--->name= EmployeeApplication

/////RC Model-->New Class--> Employee.cs

namespace EmployeeApplication.Models
{
	public class Employee
	{
		public int id {  get; set; }
		public string name { get; set; }
		public DateTime reg_date { get; set; }
		public string address { get; set; }
		public string mob_num {  get; set; }
		public string email {  get; set; }
		public string password { get; set; }

		public Employee(int id, string name, DateTime reg_date, string address, string mob_num, string email, string password)
		{
			this.id = id;
			this.name = name;
			this.reg_date = reg_date;
			this.address = address;
			this.mob_num = mob_num;
			this.email = email;
			this.password = password;
		}

		public Employee(string name, DateTime reg_date, string address, string mob_num, string email, string password)
		{
			this.name = name;
			this.reg_date = reg_date;
			this.address = address;
			this.mob_num = mob_num;
			this.email = email;
			this.password = password;
		}
	}
}

/////dependencies import

/////RC EmployeeApplication project ---> New Folder ---> Repositories
///// RC Repositories--->Add Class--->CollectionContext.cs

using EmployeeApplication.Models;
using Microsoft.EntityFrameworkCore;

namespace EmployeeApplication.Repositories
{
	public class CollectionContext : DbContext
	{
		public CollectionContext() { }

		public DbSet<Employee> Employees { get; set; }

		protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
		{
			string connectionString = "server=localhost;port=3306;user=root;password=root123;database=practisedatabase";
			optionsBuilder.UseMySQL(connectionString);
		}

		protected override void OnModelCreating(ModelBuilder modelBuilder)
		{
			base.OnModelCreating(modelBuilder);

			modelBuilder.Entity<Employee>(entity =>
			{
				entity.HasKey(e=>e.id);
				entity.Property(e => e.name);
				entity.Property(e => e.reg_date);
				entity.Property(e => e.address);
				entity.Property(e=>e.mob_num);
				entity.Property(e=>e.email);
				entity.Property(e => e.password);
			});
			modelBuilder.Entity<Employee>().ToTable("Employee");
		}
	}
}


///// RC Repositories--->Add Class--->EmployeeManager.cs

using EmployeeApplication.Models;

namespace EmployeeApplication.Repositories
{
	public class EmployeeManager : IEmployeeManager
	{
		public void AddEmployee(Employee employee)
		{
			using (var context = new CollectionContext())
			{
				context.Employees.Add(employee);
				context.SaveChanges();
			}

		}

		public void DeleteEmployee(int id)
		{
			using (var context = new CollectionContext())
			{
				context.Employees.Remove(context.Employees.Find(id));
				context.SaveChanges();
			}
		}

		public List<Employee> GetAll()
		{
			using (var context = new CollectionContext())
			{
				return context.Employees.ToList();
			}
		}

		public Employee GetEmployeeById(int id)
		{
			using (var context = new CollectionContext())
			{
				return (Employee) context.Employees.Find(id);
			}
		}

        public List<Employee> Sort()
        {
            using(var context = new CollectionContext())
			{
				return context.Employees.OrderByDescending(e=>e.name).ToList();
			}
        }

        public void UpdateEmployee(Employee employee)
        {
            using(var context = new CollectionContext())
			{
				var emp = context.Employees.Find(employee.id);
				emp.name= employee.name;
				emp.email= employee.email;
				emp.reg_date= employee.reg_date;
				emp.address	= employee.address;
				emp.mob_num= employee.mob_num;
				emp.password= employee.password;
				context.SaveChanges();
			}
        }
    }
}


///// RC Repositories--->Add interface--->IEmployeeManager.cs


using EmployeeApplication.Models;

namespace EmployeeApplication.Repositories
{
	public interface IEmployeeManager
	{
		void AddEmployee(Employee employee);

		void DeleteEmployee(int id);
	
		List<Employee> GetAll();

		Employee GetEmployeeById(int id);

		void UpdateEmployee(Employee employee);

		List<Employee> Sort();

	}

}

///// RC Repositories--->Add interface--->IManager.cs


namespace EmployeeApplication.Repositories
{
    public interface IManager
    {
        bool Login(string email, string password);
    }
}

///// RC Repositories--->Add interface--->Manager.cs


namespace EmployeeApplication.Repositories
{
    public class Manager : IManager
    {
        public bool Login(string email, string password)
        {
            using (var context = new CollectionContext())
            {
                var emp= context.Employees.Where(e => e.email.Equals(email) && e.password.Equals(password)).FirstOrDefault();
                Console.WriteLine(emp);
                if (emp != null )
                {
                    return true;
                }
                return false;
            }

        }
    }
}


/////RC Project name EmployeeApplication---> New Folder ---> Services
/////RC Service ----> Add Class ---> interface ----> IEmployeeService.cs


using EmployeeApplication.Models;
using System.Security.Cryptography;

namespace EmployeeApplication.Services
{
	public interface IEmployeeService
	{
		void AddEmployee(Employee employee);

		void DeleteEmployee(int id);

		List<Employee> GetAll();

		Employee GetEmployeeById(int id);

        void UpdateEmployee(Employee employee);

		List<Employee> Sort();
    }

}

/////RC Service---> Add Class ----> EmployeeService.cs

using EmployeeApplication.Models;
using EmployeeApplication.Repositories;

namespace EmployeeApplication.Services
{
	public class EmployeeService : IEmployeeService
	{
		EmployeeManager employeeManager =  new EmployeeManager();
		public void AddEmployee(Employee employee)
		{
			employeeManager.AddEmployee(employee);
		}

        public void DeleteEmployee(int id)
        {
            employeeManager.DeleteEmployee(id);
        }

        public List<Employee> GetAll()
        {
           return employeeManager.GetAll();
        }

        public Employee GetEmployeeById(int id)
        {
            return employeeManager.GetEmployeeById(id);
        }

        public List<Employee> Sort()
        {
           return employeeManager.Sort();
        }

        public void UpdateEmployee(Employee employee)
        {
            employeeManager.UpdateEmployee(employee);
        }
    }
}

/////RC Service---> Add interface ----> IService.cs

namespace EmployeeApplication.Services
{
    public interface IService
    {
        bool Login(string email, string password);
    }
}

/////RC Service---> Add class ----> Service.cs


using EmployeeApplication.Repositories;

namespace EmployeeApplication.Services
{
    public class Service : IService
    {
        Manager manager = new Manager();
        public bool Login(string email, string password)
        {
           return manager.Login(email, password);
        }
    }
}

////RC Controllers---> Add Class---->EmployeeController.cs

using EmployeeApplication.Models;
using EmployeeApplication.Services;
using Microsoft.AspNetCore.Mvc;
using System.Security.Cryptography.X509Certificates;

namespace EmployeeApplication.Controllers
{
	public class EmployeeController : Controller
	{

		public IEmployeeService EmployeeService { get; set; }

		public EmployeeController(IEmployeeService employeeService)
		{
			EmployeeService = employeeService;
		}

		public IActionResult Index()
		{
			return View();
		}
		[HttpGet]
		public IActionResult AddEmployees()
		{

			return View();
		}

		[HttpPost]
		public IActionResult AddEmployees(string name, DateTime reg_date, string address, string mob_num, string email, string password)
		{

			Employee emp = new Employee(name, reg_date, address, mob_num, email, password);
			EmployeeService.AddEmployee(emp);
			return View();

		}

		[HttpGet]
		public IActionResult DeleteEmployee()
		{
			return View();
		}

		[HttpPost]
		public IActionResult DeleteEmployee(int id)
		{
			EmployeeService.DeleteEmployee(id);
			return View();
		}

		[HttpGet]
		public IActionResult GetEmployees()
		{
			var emp = EmployeeService.GetAll();
			ViewData["catalog"] = emp;
			return View();
		}

		[HttpGet]
		public IActionResult GetEmployeeById()
		{
			return View();
		}

		[HttpPost]
		public IActionResult GetEmployeeById(int id)
		{
			var emp = EmployeeService.GetEmployeeById(id);
			ViewData["id"] = emp;
			return View();
		}


		[HttpGet]
		public IActionResult Update()
		{
			return View();
		}

		[HttpPost]
		public IActionResult Update(int id, string name, DateTime reg_date, string address, string mob_num, string email, string password)
		{
			var emp = new Employee(id, name, reg_date, address, mob_num, email, password);
			EmployeeService.UpdateEmployee(emp);
			return View();
		}


		[HttpGet]
		public IActionResult Sort()
		{
			List<Employee> emp = EmployeeService.Sort();
			ViewData["sort"] = emp;
			return View();
		}


	}
}


////RC Controllers---> Add Class---->HomeController.cs


using EmployeeApplication.Models;
using EmployeeApplication.Services;
using Microsoft.AspNetCore.Mvc;
using System.Diagnostics;

namespace EmployeeApplication.Controllers
{
	public class HomeController : Controller
	{

		public IService service { get; set; }
        private readonly ILogger<HomeController> _logger;
		public HomeController(IService service, ILogger<HomeController> logger)
		{
			this.service = service;
			_logger = logger;
		}
	
		public IActionResult Index()
		{
			return View();
		}

		[HttpGet]
        public IActionResult Login()
		{
			return View();
		}

        [HttpPost]
		public IActionResult Login(string email, string password)
		{
           if( service.Login(email, password))
			{
                return RedirectToAction("Index", "Employee");
            }
            return View();
        }

		[ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
		public IActionResult Error()
		{
			return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
		}

	}
}



////Add views

///delete employee
<form asp-action="DeleteEmployee" method="post">
    Enter id: <input type="number" name="id"/>
    <input type="submit" name="Delete Employee"/>
</form>

///GetEmployeeById
<form asp-action="GetEmployeeById" method="post">
    <input type="number" name="id"/>
    <input type="submit" name="Serach"/>
</form>
    
    @if(ViewData["id"] != null)
    {
        var emp = (Employee)ViewData["id"];
        <ul>
        <li>
        @emp.id
        @emp.name
        @emp.email
        @emp.mob_num
        @emp.address
        @emp.reg_date
        </li>
        </ul>
    }

}

///GetEmployees
    List<Employee> employees = (List<Employee>)ViewData["catalog"];
    <h1>List of employees</h1>
    <ol>
        @{
            foreach(Employee employee in employees)
            {
                <li>
                @employee.id
                @employee.name
                @employee.reg_date
                @employee.address
                @employee.mob_num
                @employee.email
                @employee.password
                </li>
            }
        }

    </ol>
}

///index 
<li class="nav-item">
    <a class="nav-link text-dark" asp-area="" asp-controller="Employee" asp-action="DeleteEmployee">Remove Employees</a>
</li>


///sort
@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{

    List<Employee> employees = (List<Employee>)ViewData["sort"];
    foreach(Employee employee in employees)
    {
        <ul>
        <li>
        @employee.name
        @employee.mob_num
        @employee.email
        @employee.address
        @employee.id
        @employee.reg_date
        </li>
        </ul>
    }
}


///update
@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}
<form asp-action="Update" method="post">
    Id:<input type="number" name="id"/><br/>
    Name:<input type="text" name="name" /><br />
    Registration-Date:<input type="date" name="reg_date" /><br />
    Address:<input type="text" name="address" /><br />
    Mobile Number:<input type="text" name="mob_num" /><br />
    Email:<input type="text" name="email" /><br />
    Password:<input type="text" name="password" /><br />
    <input type="submit" name="Add Product" />
</form>


















